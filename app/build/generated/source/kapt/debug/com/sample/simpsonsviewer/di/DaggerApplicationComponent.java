// Generated by Dagger (https://dagger.dev).
package com.sample.simpsonsviewer.di;

import android.app.Application;
import android.content.Context;
import com.sample.simpsonsviewer.MainApplication;
import com.sample.simpsonsviewer.repository.SimpsonsHomeRepositoryImpl;
import com.sample.simpsonsviewer.repository.SimpsonsService;
import com.sample.simpsonsviewer.view.MainActivity;
import com.sample.simpsonsviewer.view.SimpsonsDetailFragment;
import com.sample.simpsonsviewer.view.SimpsonsHomeFragment;
import com.sample.simpsonsviewer.view.SimpsonsHomeFragment_MembersInjector;
import com.sample.simpsonsviewer.viewmodel.SimpsonsHomeViewModelFactory;
import com.sample.simpsonsviewer.viewmodel.SimpsonsHomeViewModelImpl;
import dagger.android.AndroidInjector;
import dagger.android.DaggerApplication_MembersInjector;
import dagger.android.DispatchingAndroidInjector;
import dagger.android.DispatchingAndroidInjector_Factory;
import dagger.android.support.DaggerAppCompatActivity_MembersInjector;
import dagger.android.support.DaggerFragment_MembersInjector;
import dagger.internal.MapBuilder;
import dagger.internal.Preconditions;
import java.util.Collections;
import java.util.Map;
import javax.inject.Provider;
import retrofit2.Retrofit;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DaggerApplicationComponent implements ApplicationComponent {
  private final Context addContext;

  private Provider<ActivityModule_ContributeMainActivity.MainActivitySubcomponent.Factory> mainActivitySubcomponentFactoryProvider;

  private DaggerApplicationComponent(Application application, Context addContextParam) {
    this.addContext = addContextParam;
    initialize(application, addContextParam);
  }

  public static ApplicationComponent.Builder builder() {
    return new Builder();
  }

  private Map<Class<?>, Provider<AndroidInjector.Factory<?>>> mapOfClassOfAndProviderOfAndroidInjectorFactoryOf(
      ) {
    return Collections.<Class<?>, Provider<AndroidInjector.Factory<?>>>singletonMap(MainActivity.class, (Provider) mainActivitySubcomponentFactoryProvider);
  }

  private DispatchingAndroidInjector<Object> dispatchingAndroidInjectorOfObject() {
    return DispatchingAndroidInjector_Factory.newInstance(mapOfClassOfAndProviderOfAndroidInjectorFactoryOf(), Collections.<String, Provider<AndroidInjector.Factory<?>>>emptyMap());
  }

  @SuppressWarnings("unchecked")
  private void initialize(final Application application, final Context addContextParam) {
    this.mainActivitySubcomponentFactoryProvider = new Provider<ActivityModule_ContributeMainActivity.MainActivitySubcomponent.Factory>() {
      @Override
      public ActivityModule_ContributeMainActivity.MainActivitySubcomponent.Factory get() {
        return new MainActivitySubcomponentFactory();
      }
    };
  }

  @Override
  public void inject(MainApplication mainApplication) {
    injectMainApplication(mainApplication);
  }

  private MainApplication injectMainApplication(MainApplication instance) {
    DaggerApplication_MembersInjector.injectAndroidInjector(instance, dispatchingAndroidInjectorOfObject());
    return instance;
  }

  private static final class Builder implements ApplicationComponent.Builder {
    private Application application;

    private Context addContext;

    @Override
    public Builder application(Application application) {
      this.application = Preconditions.checkNotNull(application);
      return this;
    }

    @Override
    public Builder addContext(Context context) {
      this.addContext = Preconditions.checkNotNull(context);
      return this;
    }

    @Override
    public ApplicationComponent build() {
      Preconditions.checkBuilderRequirement(application, Application.class);
      Preconditions.checkBuilderRequirement(addContext, Context.class);
      return new DaggerApplicationComponent(application, addContext);
    }
  }

  private final class MainActivitySubcomponentFactory implements ActivityModule_ContributeMainActivity.MainActivitySubcomponent.Factory {
    @Override
    public ActivityModule_ContributeMainActivity.MainActivitySubcomponent create(
        MainActivity arg0) {
      Preconditions.checkNotNull(arg0);
      return new MainActivitySubcomponentImpl(arg0);
    }
  }

  private final class MainActivitySubcomponentImpl implements ActivityModule_ContributeMainActivity.MainActivitySubcomponent {
    private Provider<SimpsonsHomeFragmentModule_ProvideHomeFragment.SimpsonsHomeFragmentSubcomponent.Factory> simpsonsHomeFragmentSubcomponentFactoryProvider;

    private Provider<SimpsonsDetailFragmentModule_ProvideHomeFragment.SimpsonsDetailFragmentSubcomponent.Factory> simpsonsDetailFragmentSubcomponentFactoryProvider;

    private MainActivitySubcomponentImpl(MainActivity arg0) {

      initialize(arg0);
    }

    private Map<Class<?>, Provider<AndroidInjector.Factory<?>>> mapOfClassOfAndProviderOfAndroidInjectorFactoryOf(
        ) {
      return MapBuilder.<Class<?>, Provider<AndroidInjector.Factory<?>>>newMapBuilder(3).put(MainActivity.class, (Provider) DaggerApplicationComponent.this.mainActivitySubcomponentFactoryProvider).put(SimpsonsHomeFragment.class, (Provider) simpsonsHomeFragmentSubcomponentFactoryProvider).put(SimpsonsDetailFragment.class, (Provider) simpsonsDetailFragmentSubcomponentFactoryProvider).build();
    }

    private DispatchingAndroidInjector<Object> dispatchingAndroidInjectorOfObject() {
      return DispatchingAndroidInjector_Factory.newInstance(mapOfClassOfAndProviderOfAndroidInjectorFactoryOf(), Collections.<String, Provider<AndroidInjector.Factory<?>>>emptyMap());
    }

    private Retrofit retrofit() {
      return ApiModule_ProvideRetrofitFactory.provideRetrofit(DaggerApplicationComponent.this.addContext);
    }

    private SimpsonsService simpsonsService() {
      return ApiModule_ProvideEmployeeServiceFactory.provideEmployeeService(retrofit());
    }

    @SuppressWarnings("unchecked")
    private void initialize(final MainActivity arg0) {
      this.simpsonsHomeFragmentSubcomponentFactoryProvider = new Provider<SimpsonsHomeFragmentModule_ProvideHomeFragment.SimpsonsHomeFragmentSubcomponent.Factory>() {
        @Override
        public SimpsonsHomeFragmentModule_ProvideHomeFragment.SimpsonsHomeFragmentSubcomponent.Factory get(
            ) {
          return new SimpsonsHomeFragmentSubcomponentFactory();
        }
      };
      this.simpsonsDetailFragmentSubcomponentFactoryProvider = new Provider<SimpsonsDetailFragmentModule_ProvideHomeFragment.SimpsonsDetailFragmentSubcomponent.Factory>() {
        @Override
        public SimpsonsDetailFragmentModule_ProvideHomeFragment.SimpsonsDetailFragmentSubcomponent.Factory get(
            ) {
          return new SimpsonsDetailFragmentSubcomponentFactory();
        }
      };
    }

    @Override
    public void inject(MainActivity arg0) {
      injectMainActivity(arg0);
    }

    private MainActivity injectMainActivity(MainActivity instance) {
      DaggerAppCompatActivity_MembersInjector.injectAndroidInjector(instance, dispatchingAndroidInjectorOfObject());
      return instance;
    }

    private final class SimpsonsHomeFragmentSubcomponentFactory implements SimpsonsHomeFragmentModule_ProvideHomeFragment.SimpsonsHomeFragmentSubcomponent.Factory {
      @Override
      public SimpsonsHomeFragmentModule_ProvideHomeFragment.SimpsonsHomeFragmentSubcomponent create(
          SimpsonsHomeFragment arg0) {
        Preconditions.checkNotNull(arg0);
        return new SimpsonsHomeFragmentSubcomponentImpl(arg0);
      }
    }

    private final class SimpsonsHomeFragmentSubcomponentImpl implements SimpsonsHomeFragmentModule_ProvideHomeFragment.SimpsonsHomeFragmentSubcomponent {
      private final SimpsonsHomeFragment arg0;

      private SimpsonsHomeFragmentSubcomponentImpl(SimpsonsHomeFragment arg0Param) {
        this.arg0 = arg0Param;
      }

      private SimpsonsHomeRepositoryImpl simpsonsHomeRepositoryImpl() {
        return new SimpsonsHomeRepositoryImpl(MainActivitySubcomponentImpl.this.simpsonsService());
      }

      private SimpsonsHomeViewModelFactory simpsonsHomeViewModelFactory() {
        return SimpsonsHomeFragmentDependenciesModule_HomeFragViewModelModule_ProvideHomeViewModelFactoryFactory.provideHomeViewModelFactory(simpsonsHomeRepositoryImpl());
      }

      private SimpsonsHomeViewModelImpl simpsonsHomeViewModelImpl() {
        return SimpsonsHomeFragmentDependenciesModule_HomeFragViewModelModule_ProvideViewModelFactory.provideViewModel(arg0, simpsonsHomeViewModelFactory());
      }

      @Override
      public void inject(SimpsonsHomeFragment arg0) {
        injectSimpsonsHomeFragment(arg0);
      }

      private SimpsonsHomeFragment injectSimpsonsHomeFragment(SimpsonsHomeFragment instance) {
        DaggerFragment_MembersInjector.injectAndroidInjector(instance, MainActivitySubcomponentImpl.this.dispatchingAndroidInjectorOfObject());
        SimpsonsHomeFragment_MembersInjector.injectViewModel(instance, simpsonsHomeViewModelImpl());
        return instance;
      }
    }

    private final class SimpsonsDetailFragmentSubcomponentFactory implements SimpsonsDetailFragmentModule_ProvideHomeFragment.SimpsonsDetailFragmentSubcomponent.Factory {
      @Override
      public SimpsonsDetailFragmentModule_ProvideHomeFragment.SimpsonsDetailFragmentSubcomponent create(
          SimpsonsDetailFragment arg0) {
        Preconditions.checkNotNull(arg0);
        return new SimpsonsDetailFragmentSubcomponentImpl(arg0);
      }
    }

    private final class SimpsonsDetailFragmentSubcomponentImpl implements SimpsonsDetailFragmentModule_ProvideHomeFragment.SimpsonsDetailFragmentSubcomponent {
      private SimpsonsDetailFragmentSubcomponentImpl(SimpsonsDetailFragment arg0) {

      }

      @Override
      public void inject(SimpsonsDetailFragment arg0) {
        injectSimpsonsDetailFragment(arg0);
      }

      private SimpsonsDetailFragment injectSimpsonsDetailFragment(SimpsonsDetailFragment instance) {
        DaggerFragment_MembersInjector.injectAndroidInjector(instance, MainActivitySubcomponentImpl.this.dispatchingAndroidInjectorOfObject());
        return instance;
      }
    }
  }
}
